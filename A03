/* Tyler Briggs
AO3
3013
This program reads in animals and sorts them according to their distance for a certain coordnate.namespace */
 
 
 
//https://stackoverflow.com/questions/55116344/how-to-setup-vs-code-for-c-14-c-17
//https://github.com/nlohmann/json
 
 
#include "json_helper.cpp"
#include <fstream>
#include <iostream>
 
#define _USE_MATH_DEFINES
 
#include <math.h>
 
using namespace std;
 
const static double EarthRadiusKm = 6372.8;
 
inline double DegreeToRadian(double angle) {
   return M_PI * angle / 180.0;
}
 
class Coordinate {
public:
   Coordinate(double latitude, double longitude) : myLatitude(latitude), myLongitude(longitude) {}
 
   double Latitude() const {
       return myLatitude;
   }
 
   double Longitude() const {
       return myLongitude;
   }
 
private:
   double myLatitude;
   double myLongitude;
};
 
double HaversineDistance(const Coordinate &p1, const Coordinate &p2) {
   double latRad1 = DegreeToRadian(p1.Latitude());
   double latRad2 = DegreeToRadian(p2.Latitude());
   double lonRad1 = DegreeToRadian(p1.Longitude());
   double lonRad2 = DegreeToRadian(p2.Longitude());
 
   double diffLa = latRad2 - latRad1;
   double doffLo = lonRad2 - lonRad1;
 
   double computation = asin(sqrt(sin(diffLa / 2) * sin(diffLa / 2) + cos(latRad1) * cos(latRad2) * sin(doffLo / 2) * sin(doffLo / 2)));
   return 2 * EarthRadiusKm * computation;
}
 
struct Animal {
   string animal_name;
   long date;
   double latitude;
   double longitude;
   float priority;
   bool validated;
   string version;
 
   Animal() {
       animal_name = "";
       date = 0;
       latitude = 0.0;
       longitude = 0.0;
       priority = 0.0;
       validated = 0;
       version = "";
   }
 
   Animal(string name, long _date, double lat, double lon, float pri, bool val, string ver) {
       animal_name = name;
       date = _date;
       latitude = lat;
       longitude = lon;
       priority = pri;
       validated = val;
       version = ver;
   }
 
   Animal(json j) {
       animal_name = j["animal_name"];
       date = j["date"];
       latitude = j["latitude"];
       longitude = j["longitude"];
       priority = j["priority"];
       validated = j["validated"];
       version = j["version"];
   }
};
 
class AnimalHelper {
private:
   Animal **Animals;
   JsonHelper *J;
   json obj;
   int size;
 
public:
   AnimalHelper(string filename) {
       J = new JsonHelper(filename);
       size = J->getSize();
       Animals = new Animal *[size];
       for (int i = 0; i < size; i++) {
           obj = J->getNext();
           Animals[i] = new Animal(obj);
       }
   }
 
 
  
   void orderheap(int i)
   {
   //checks if child 1 is bigger then list if it is
   //then we dont need to check order
   if(i+3>size)
   return;
   else;
   //whatever cordniate you want prioritize list to
   Coordinate base(0,0);
 
   Coordinate parent(Animals[i]->latitude,Animals[i]->longitude);
 
   Coordinate child1(Animals[i+2]->latitude,Animals[i+2]->longitude);
 
   Coordinate child2(Animals[i+3]->latitude,Animals[i+3]->longitude);
 
   if(HaversineDistance(child1, base)< HaversineDistance(child2, base))
   {
   if(HaversineDistance(child1,base)<HaversineDistance(parent, base)){
   //creats temp to swap Animals[i]with Animals[i=2]
   swap=new Animal();
   swap=Animals[i];
   Animals[i]=Animals[i+2];
   Animals[i+2]=swap;
   //check if we are at front of list
       if(i-2>1)
       orderheap(i-2);
       else
       return;
 
       }
       //check next value in heap
       else
       orderheap(i++);
       }
 
 
   else
   {
 
if(HaversineDistance(child2,base)<HaversineDistance(parent, base)){
   swap=new Animal();
   swap=Animals[i];
   Animals[i]=Animals[i+3];
   Animals[i=3]=swap;
   //check if we are at front of list
   if(i-2>1)
   orderheap(i-2);
   else
   return;
 
   }
   //check next value in heap
   else
   orderheap(i++);
 
   }
  
 
 
   void PrintAnimals() {
 
       for (int i = 0; i < size; i++) {
 
           cout << Animals[i]->animal_name << " "
           << Animals[i]->latitude << " "
           << Animals[i]->longitude << " "
           << Animals[i]->date << " "
           << Animals[i]->priority << " "
           << Animals[i]->validated << " "
           << Animals[i]->version << endl;
 
       }
   }
};
 
 
 
int main(int argc, char **argv) {
 
   AnimalHelper AH("animals.json");
   AH.orderheap(1);
   AH.PrintAnimals();
 
   return 0;
}

