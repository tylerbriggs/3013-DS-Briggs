//File wont run because json.hpp. The file brings like 1000 errors. Runs otherwise. I dont understand. thanks

#include <iostream>
#include <fstream>
#include <string.h>
#include "Heap.hpp"
#include "JsonFacade.hpp"
#include "json.hpp"
#include "Geo.hpp"

using namespace std;

using json = nlohmann::json;

struct City{
    double Priority;
    int rank;
    int population;
    string city;
    string state;
    double longitude;
    double latitude;
    double growth;
    City(){
        Priority=0;
        rank = 0;
        city = "";
        population=0;
        double longitude=0;
        double latitude=0;
        double growth=0;
        state= "";


    }
    City(json obj){
        rank= obj["rank"];
        growth= obj["growth_from_2000_to_2013"];
        city = obj["city"];
        Priority = obj["population"];
        longitude = obj["longitude"];
        latitude = obj["latitude"];
        state="state";
    }
};

int main(){
    json obj;
    City** Cities;
    City** distance;
    City* temp;
    string filename = "cities.json";
    JsonFacade J(filename);

    Heap <City> H(1000,false);

    Heap <City> D(1000,false);


    int size = J.getSize();
    Cities = new City *[size];
    // loads an array of cities with the json data
    for (int i = 0; i < size; i++) {
        obj = J.getNext();
        Cities[i] = new City(obj);
    }




    // calling heapify 
    H.Heapify(Cities,size);

    
    
    //prints first 10 citys and their three closest cities
    for(int i=0;i<=10;i++)
    {
      temp = H.Extract();
      cout<<i<<" "<<temp->city<< " " <<temp->Priority << endl;

      distance=new City*[size];

     

      Coordinate a(Cities[i]->longitude, Cities[i]->latitude);

          //calculates distance and puts it as priority 
          //and in array distance
          for(int j=0;j<=size;j++)
          {
            distance[j]= new City[j];                    

            Coordinate b(Cities[i]->longitude, Cities[i]->latitude);
            Cities[i]->Priority= a.HaversineDistance(1,2);

           
          }
      //creates heap ordered by distnance from city in i
      D.Heapify(distance, size);

      //prints 3 closest cities
        for(int f=0;f<=3;i++)
          temp = H.Extract();
            cout<<i<<" "<<temp->city<< " " <<"Distance"<<temp->Priority << endl;
        }
    
    cout<<"Last ten cities"<< endl;

   //prints last 10 citys and their three closest cities
    for(int i=size;i<=size-10;i--)
    {
      temp = H.Extract();
      cout<<i<<" "<<temp->city<< " " <<temp->Priority << endl;

      distance=new City*[size];

     

      Coordinate a(Cities[i]->longitude, Cities[i]->latitude);

          //calculates distance and puts it as priority 
          //and in array distance
          for(int j=0; j<=size;j++)
          {
            distance[j]= new City[j];                    

            Coordinate b(Cities[i]->longitude, Cities[i]->latitude);
            Cities[i]->Priority= a.HaversineDistance(1,2);

           
          }
      //creates heap ordered by distnance from city in i
      D.Heapify(distance, size);

      //prints 3 closest cities
        for(int f=0;f<=3;i++)
          temp = H.Extract();
            cout<<i<<" "<<temp->city<< " " <<"Distance"<<temp->Priority << endl;
        }
}

